/************************************************************************
 * minimize script using rollup
 * 
 * you need to install rollup & terser to use this tools
 *
 * usage:
 * npx rollup -c ./public/modules/group/__rollup.group.js
 *
 * This module is generated by fgta5 generator at 11 Oct 2025 04:22
 ************************************************************************/

 
import terser from '@rollup/plugin-terser';
import { writeFileSync } from 'fs';
import { readFile, unlink, access } from 'fs/promises';
import { join } from 'path';
import { constants } from 'fs';

const currentdate = (new Date()).toISOString().split('T')[0]
const banner = `group
*
* build at ${currentdate}
`

const filename = `version.txt`;
const filepath = join('public/modules/group', filename);

/* Hapus versi sebelumnya */
if (await isExists(filepath)) {
	const previousVersionNumber = await readFile(filepath, 'utf8');
	const previousFile = `public/modules/group/group-${previousVersionNumber}.min.mjs`
	await unlink(previousFile);
}

/* Create New Version */
const newVersionNumber = getTimestampYYMMDDHHII()


// Simpan ke file
writeFileSync(filepath, newVersionNumber, 'utf8')


export default {
	input: "public/modules/group/group.mjs", // File utama yang menjadi entry point
	output: {
		file: `public/modules/group/group-${newVersionNumber}.min.mjs`, // Lokasi output file hasil bundle
		format: "esm", // Format modul ECMAScript
		banner: `/*! ${banner}*/`,
		// manualChunks: (id) => {
		// 	console.log('Chunking:', id);
		// 	if (id.includes('module.mjs')  || id.includes('-ext.mjs') || id.includes('public/libs/webmodule')) return null;
		// }
	},
	external: (id) => {
 		return id.includes('module.mjs') || id === '$fgta5' || id.includes('public/libs/webmodule');
	},
	
	preserveEntrySignatures: 'strict',

    plugins: [
		terser({
			compress: {
				pure_funcs: ['console.log', 'console.warn'] // hanya log dan warn dihilangkan, sedangkan error tidak
				// drop_console: true // hapus console
			}
		})
	]
}


function getTimestampYYMMDDHHII() {
	const now = new Date();
	const yy = String(now.getFullYear()).slice(-2);
	const mm = String(now.getMonth() + 1).padStart(2, '0');
	const dd = String(now.getDate()).padStart(2, '0');
	const hh = String(now.getHours()).padStart(2, '0');
	const ii = String(now.getMinutes()).padStart(2, '0');
	return `${yy}${mm}${dd}${hh}${ii}`;
};


async function isExists(filepath) {
	try {
		await access(filepath, constants.F_OK);
		return true
	} catch {
		return false
	}

}